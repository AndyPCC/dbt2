#!/usr/bin/env python

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006      Open Source Development Labs, Inc.
#               2006-2010 Mark Wong
#

import sys
from math import ceil, floor, fsum

def average(values):
    count = float(len(values))
    if count == 0:
        return 0
    return fsum(values) / float(len(values))

def percentile_90(values):
    index = 0.9 * float(len(values))
    findex = int(floor(index))
    cindex = int(ceil(index))
    values.sort()
    try:
        if findex == cindex:
            return values[findex - 1]
        return (values[findex - 1] + values [cindex - 1]) / 2.0
    except:
        return 0

if len(sys.argv) != 2:
    print 'usage: %s <mix.log>' % sys.argv[0]
    exit(1)

filename = sys.argv[1]

try:
    f = open(filename, 'r')
except:
    print 'cannot open file: %s' % filename
    exit(1)

rampup_start = None
rampup_end = None
steadystate_start = None
steadystate_end = None

d = 'd'
n = 'n'
o = 'o'
p = 'p'
s = 's'

error_count = 0
response_time = dict()
rollback_count = dict()
transaction_count = dict()

for key in [d, n, o, p, s]:
    response_time[key] = list()
    rollback_count[key] = 0
    transaction_count[key] = 0

total_transaction_count = 0

for line in f:
    c = line.strip().split(',')

    if len(c) != 5:
        print 'unknown number of columns: %d' % len(c)
        print 'exiting'
        exit(2)

    if rampup_start is None:
        rampup_start = long(c[0])

    key = c[1]
    code = c[2]

    if key == 'START':
        rampup_end = long(c[0])
        steadystate_start = long(c[0])
        continue
    elif key == 'TERMINATED':
        continue

    if code == 'E':
        error_count += 1
    else:
        transaction_count[key] += 1
        if code == 'C':
            response_time[key].append(float(c[3]))
        elif code == 'R':
            rollback_count[key] += 1

    total_transaction_count += 1

if rampup_end is None:
    print 'START marker not found'
    exit(3)

transaction_name = dict()
transaction_name[d] = 'Delivery'
transaction_name[n] = 'New Order'
transaction_name[o] = 'Order Status'
transaction_name[p] = 'Payment'
transaction_name[s] = 'Stock Level'

steadystate_end = long(c[0])

print '                         Response Time (s)'
print ' Transaction      %    Average :    90th %        Total        Rollbacks      %'
print '------------  -----  ---------------------  -----------  ---------------  -----'

for key in [d, n, o, p, s]:
    try:
        mix_percentage = float(transaction_count[key]) / \
                float(total_transaction_count) * 100.0
    except:
        mix_percentage = 0

    try:
        rollback_percentage = float(rollback_count[key]) / \
                float(transaction_count[key]) * 100.0
    except:
        rollback_percentage = 0

    print '%12s  %5.2f  %9.3f : %9.3f  %11d  %15d  %5.2f' % (
            transaction_name[key],
            mix_percentage,
            average(response_time[key]),
            percentile_90(response_time[key]),
            transaction_count[key],
            rollback_count[key],
            rollback_percentage)
try:
    rollback_percentage = float(rollback_count[dm]) / \
            float(transaction_count[dm]) * 100.0
except:
    rollback_percentage = 0

print '------------  -----  ---------------------  -----------  ---------------  -----'

duration = float(steadystate_end - steadystate_start)
print
print '%0.2f new-order transactions per minute (NOTPM)' % \
        (float(transaction_count[n]) / duration)
print '%0.1f minute duration' % (duration / 60.0)
print '%d total unknown errors' % error_count
print '%0.1f seconds(s) ramping up' % (float(rampup_end - rampup_start) / 60.0)

#!/usr/bin/perl -w

#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003 Mark Wong & Open Source Development Lab, Inc.
#

use strict;
use Getopt::Long;

my $stats_dir;

GetOptions(
	"dir=s" => \$stats_dir
);

unless ( $stats_dir ) {
	print "usage: analyze_stats.pl --dir <directory>\n";
	exit 1;
}

my @index_names = ("i_customer", "i_orders", "pk_customer", "pk_district",
		"pk_item", "pk_new_order", "pk_order_line", "pk_orders", "pk_stock",
		"pk_warehouse" );

my @table_names = ("customer", "district", "history", "item", "new_order",
		"order_line", "orders", "stock", "warehouse");

my @input_file;

sub process {
	my ($filename, $column, $ylabel, $outfile, @names) = @_;
    print "Creating chart for $ylabel...\n";

	# Read in all the data files and process the data.
	my @index_data;
	$filename = ( split /\//, $filename )[ -1 ];
	foreach my $index ( @names ) {
		my @data;
		my $previous_value = -1;

		# The first data point must be a zero.
		open( FILE, "$stats_dir/$filename" );
		while ( <FILE> ) {
			/\s$index\s/ and do {
				my $current_value = (split(/ *\| */, $_))[$column];
				$previous_value = $current_value if ($previous_value == -1);
				push @data, $current_value - $previous_value;
				$previous_value = $current_value;
			}
		}
		close( FILE );
		@{ $index_data[ $#index_data + 1] } = @data;
	}

	# Output the a graphable data file.
	# The last data point seems kind of screwy, always drop it.
	$filename = "$outfile.data";
	open( FILE, ">$stats_dir/$filename" );
	for ( my $i = 0; $i < ( scalar @{ $index_data[ 0 ] } ) - 1; $i++ ) {
		print FILE "$i";
		for ( my $j = 0; $j < scalar @index_data; $j++ ) {
			print FILE " $index_data[ $j ][ $i ]";
		}
		print FILE "\n";
	}
	close( FILE );

	# Create a gnuplot input file.
	my $input_filename = "$outfile.input";
	push @input_file, $input_filename;
	open( FILE, ">$stats_dir/$input_filename" );
	print FILE "set grid xtics ytics\n";
	print FILE "set xlabel \"Elapsed Time (Minutes)\"\n";
	print FILE "set ylabel \"$ylabel\"\n";
	print FILE "set term png small\n";
	print FILE "set output \"$outfile.png\"\n";
	print FILE "set yrange [0:]\n";
	print FILE "plot \"$filename\" using 1:2 title \"$names[ 0 ]\" with lines, \\\n";
	my $i;
	for ( $i = 1; $i < (scalar @names) - 1; $i++ ) {
		print FILE "\"$filename\" using 1:" . ($i + 2) .
			" title \"$names[ $i ]\" with lines, \\\n";
	}
	print FILE "\"$filename\" using 1:" . ($i + 2) .
		" title \"$names[ $i ]\" with lines\n";
	close( FILE );
}

process('indexes_scan.out', 5, 'Index Scans', 'index-scans', @index_names);
process('index_info.out', 4, 'Index Blocks Read', 'index-blocks',
		@index_names);
process('index_info.out', 5, 'Index Blocks Hit', 'index-blocks-hit',
		@index_names);
process('table_info.out', 2, 'Table Blocks Read', 'table-blocks',
		@table_names);
process('table_info.out', 3, 'Table Blocks Hit', 'table-blocks-hit',
		@table_names);
process('table_scan.out', 3, 'Sequential Scans', 'table-seq-scan',
		@table_names);
process('table_scan.out', 7, 'Rows Inserted', 'table-inserts', @table_names);
process('table_scan.out', 8, 'Rows Updated', 'table-updates', @table_names);
process('table_scan.out', 9, 'Row Deleted', 'table-deletes', @table_names);
process('table_scan.out', 10, 'HOT Rows Updated', 'table-updates-hot',
		@table_names);
process('table_scan.out', 12, 'Dead Tuples', 'table-dead', @table_names);

# Plot each gnuplot input file.
chdir $stats_dir;
foreach my $filename ( @input_file ) {
	system "gnuplot $filename";
}
